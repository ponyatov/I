%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }
%token EOL						// end of line
%token <o> SYM NUM STR DOC		// primitive: symbol number 'string' "doc"
%token <o> LP RP LQ RQ LC RC	// bracket: () [] {}
%token <o> EQ AT COLON			// operator: = @ :
%token <o> ADD SUB MUL DIV POW	// operator: + - * / ^
%type <o> ex vector dict		// expression [vec tor] {dict}

%right EQ
%left AT
%left ADD SUB
%left MUL DIV
%left POW
%left PFX
%%
REPL : | REPL EOL
REPL : REPL ex EOL	{ cout << $2->dump() << endl;
					  cout << "------------------------------------"; 
					  cout << $2->eval(global)->dump() << endl;
					  cout << "------------------------------------"; 
					  cout << global->dump() << endl;
					  cout << "====================================" << endl; }
ex : SYM | NUM | STR 

ex : ADD ex %prec PFX	{ $$=$1; $$->push($2); }
ex : SUB ex	%prec PFX	{ $$=$1; $$->push($2); }
ex : ex ADD ex			{ $$=$2; $$->push($1); $$->push($3); }
ex : ex SUB ex			{ $$=$2; $$->push($1); $$->push($3); }
ex : ex MUL ex			{ $$=$2; $$->push($1); $$->push($3); }
ex : ex DIV ex			{ $$=$2; $$->push($1); $$->push($3); }
ex : ex POW ex			{ $$=$2; $$->push($1); $$->push($3); }

ex : ex EQ ex			{ $$=$2; $$->push($1); $$->push($3); }
ex : ex AT ex			{ $$=$2; $$->push($1); $$->push($3); }

ex : LP ex RP			{ $$=$2; }

ex : LQ vector RQ		{ $$=$2; }
vector: 				{ $$=new Vector(); }
vector: vector EOL		{ $$=$1; }
vector: vector ex		{ $$=$1; $$->push($2); }

ex : LC dict RC			{ $$=$2; }
dict:					{ $$=new Dict(); }
dict: dict EOL			{ $$=$1; }
dict: dict SYM COLON	{ $$=$1; $$->attr[$2->val]=$2; }
dict: dict SYM EQ ex	{ $$=$1; $$->attr[$2->val]=$4; }
dict: dict ex			{ $$=$1; $$->push($2); }

ex : ex DOC				{ $$=$1; $$->attr["doc"]=$2; }

